using MultigraphEditor.src.graph;
using MultigraphEditor.Src.alghoritm;
using MultigraphEditor.Src.graph;
using MultigraphEditor.Src.layers;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace MultigraphEditor.Forms
{
    public partial class AlghoritmForm : Form
    {
        private string? selectedAlgorithm = null;
        private IMGraphLayer? selectedLayer = null;
        private Dictionary<string, Type> algorithmNameToTypeMap = new Dictionary<string, Type>();
        TableLayoutPanel orginized = new TableLayoutPanel();
        private ComboBox layerComboBox;
        private ComboBox algorithmComboBox;
        private ComboBox startNode;
        private ComboBox endNode;
        private INode? start = null;
        private INode? end = null;
        ListBox pathListBox = new ListBox();

        internal AlghoritmForm(List<IMGraphLayer> layerList, List<Type> algorithmList)
        {
            InitializeComponent();
            orginized.RowCount = 3;
            orginized.ColumnCount = 1;
            orginized.RowStyles.Add(new RowStyle(SizeType.AutoSize));
            orginized.RowStyles.Add(new RowStyle(SizeType.AutoSize));
            orginized.RowStyles.Add(new RowStyle(SizeType.AutoSize));
            orginized.ColumnStyles.Add(new ColumnStyle(SizeType.AutoSize));
            orginized.Dock = DockStyle.Fill;
            orginized.AutoSize = true;

            AutoSize = true;
            layerComboBox = new ComboBox
            {
                DropDownStyle = ComboBoxStyle.DropDownList,
                Name = "layerComboBox",
                Width = 200,
                Location = new Point(10, 10)
            };
            algorithmComboBox = new ComboBox
            {
                DropDownStyle = ComboBoxStyle.DropDownList,
                Name = "algorithmComboBox",
                Width = 200,
                Location = new Point(10, 10)
            };
            startNode = new ComboBox
            {
                DropDownStyle = ComboBoxStyle.DropDownList,
                Name = "startNode",
                Width = 100,
            };
            endNode = new ComboBox
            {
                DropDownStyle = ComboBoxStyle.DropDownList,
                Name = "endNode",
                Width = 100,
            };
            TableLayoutPanel nodePanel = new TableLayoutPanel
            {
                RowCount = 1,
                ColumnCount = 2,
                AutoSize = true,
                AutoSizeMode = AutoSizeMode.GrowAndShrink
            };
            nodePanel.Controls.Add(startNode, 0, 0);
            nodePanel.Controls.Add(endNode, 1, 0);
            orginized.Controls.Add(nodePanel, 0, 2);

            foreach (IMGraphLayer l in layerList)
            {
                layerComboBox.Items.Add(l);
            }
            layerComboBox.SelectedValueChanged += SetNodes;

            foreach (Type t in algorithmList)
            {
                IMGraphAlgorithm? algo = Activator.CreateInstance(t) as IMGraphAlgorithm;
                if (algo != null)
                {
                    string displayName = algo.Name ?? "";
                    algorithmComboBox.Items.Add(displayName);
                    algorithmNameToTypeMap[displayName] = t;
                }
            }

            selectedLayer = layerList[0];
            foreach (IMGraphEditorNode n in layerList[0].nodes)
            {
                startNode.Items.Add(n.Label);
                endNode.Items.Add(n.Label);
            }
            startNode.SelectedValueChanged += (sender, e) =>
            {
                start = selectedLayer.nodes.Find(n => n.Label == startNode.SelectedItem.ToString());
            };
            endNode.SelectedValueChanged += (sender, e) =>
            {
                end = selectedLayer.nodes.Find(n => n.Label == endNode.SelectedItem.ToString());
            };

            layerComboBox.DisplayMember = "Name";
            if (layerComboBox.Items.Count > 0)
            {
                layerComboBox.SelectedIndex = 0;
            }

            algorithmComboBox.DisplayMember = "Name";
            if (algorithmComboBox.Items.Count > 0)
            {
                algorithmComboBox.SelectedIndex = 0;
            }

            layerComboBox.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right | AnchorStyles.Bottom;
            algorithmComboBox.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right | AnchorStyles.Bottom;
            orginized.Controls.Add(layerComboBox, 0, 0);
            orginized.Controls.Add(algorithmComboBox, 0, 1);

            Controls.Add(orginized);
            AutoSize = true;
            AutoSizeMode = AutoSizeMode.GrowAndShrink;

            layerComboBox.SelectedIndexChanged += SetNodes;
            startNode.SelectedIndexChanged += FindPath;
            endNode.SelectedIndexChanged += FindPath;

            FormBorderStyle = FormBorderStyle.FixedSingle;
            MaximizeBox = false;
            MinimizeBox = false;
        }

        private void FindPath(object? sender, EventArgs e)
        {
            if (start == null || end == null)
            {
                return;
            }
            ClearControlsExceptComboBox();

            if (layerComboBox.SelectedItem is IMGraphLayer layer && algorithmComboBox.SelectedItem is string algoName)
            {
                IMGraphAlgorithm? algo = null;
                if (algorithmComboBox.SelectedItem is string selectedDisplayName)
                {
                    if (algorithmNameToTypeMap.TryGetValue(selectedDisplayName, out Type selectedAlgorithmType))
                    {
                        algo = Activator.CreateInstance(selectedAlgorithmType) as IMGraphAlgorithm;
                    }
                }

                if (algo != null)
                {
                    var path = algo.FindPath(start, end, selectedLayer);
                    path.Reverse();
                    pathListBox = new ListBox
                    {
                        Width = 200,
                        Height = 100,
                        Location = new Point(10, 10)
                    };

                    pathListBox.Items.Clear();
                    if (path.Count() > 0)
                    {
                        foreach (var node in path)
                        {
                            pathListBox.Items.Add(node.Label ?? "Unnamed Node");
                        }
                    }
                    else
                    {
                        pathListBox.Items.Add("No path found.");
                    }
                    orginized.RowCount = 4;
                    orginized.Controls.Add(pathListBox, 0, 3);
                }
            }
        }

        private void SetNodes(object? sender, EventArgs e)
        {
            if (layerComboBox.SelectedItem is IMGraphLayer layer)
            {
                selectedLayer = layer;
                startNode.Items.Clear();
                endNode.Items.Clear();
                foreach (IMGraphEditorNode n in layer.nodes)
                {
                    startNode.Items.Add(n.Label);
                    endNode.Items.Add(n.Label);
                }
            }
        }

        private void ClearControlsExceptComboBox()
        {
            if (pathListBox != null)
            {
                orginized.Controls.Remove(pathListBox);
            }
        }
    }
}
﻿namespace MultigraphEditor.Forms
{
    partial class AlghoritmForm
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.components = new System.ComponentModel.Container();
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(800, 450);
            this.Text = "AlghorimtForm";
        }

        #endregion
    }
}﻿using MultigraphEditor.Src.graph;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Drawing.Text;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace MultigraphEditor.Forms
{
    public partial class EditForm : Form
    {
        internal event EventHandler OnOk;
        public object DataObject { get; }

        public EditForm(object obj)
        {
            InitializeComponent();

            DataObject = obj;
            PropertyInfo[] properties = DataObject.GetType().GetProperties();
            bool hasBox = false;

            foreach (PropertyInfo property in properties)
            {
                if (property.GetCustomAttribute<ExcludeFromFormAttribute>() != null)
                {
                    continue;
                }
                DataInput.RowCount++;

                Label label = new Label();
                label.Text = property.Name;
                if (property.PropertyType == typeof(bool))
                {
                    CheckBox checkBox = new CheckBox();
                    checkBox.Name = property.Name;
                    checkBox.Checked = (bool)property.GetValue(DataObject);
                    DataInput.Controls.Add(checkBox, 1, DataInput.RowCount - 1);
                }
                else if (property.PropertyType == typeof(Font))
                {
                    ComboBox fontComboBox = new ComboBox();
                    fontComboBox.DropDownStyle = ComboBoxStyle.DropDownList;
                    fontComboBox.Name = property.Name;
                    fontComboBox.Width = 200;
                    hasBox = true;

                    InstalledFontCollection fontsCollection = new InstalledFontCollection();
                    foreach (FontFamily fontFamily in fontsCollection.Families)
                    {
                        fontComboBox.Items.Add(fontFamily.Name);
                    }

                    Font currentFont = (Font)property.GetValue(DataObject);
                    if (currentFont != null)
                    {
                        fontComboBox.SelectedItem = currentFont.FontFamily.Name;
                    }

                    fontComboBox.SelectedIndexChanged += (sender, e) =>
                    {
                        string selectedFontName = fontComboBox.SelectedItem.ToString();
                        Font selectedFont = new Font(selectedFontName, currentFont.Size);
                        property.SetValue(DataObject, selectedFont);
                    };

                    DataInput.Controls.Add(fontComboBox, 1, DataInput.RowCount - 1);
                }
                else if (property.PropertyType == typeof(Color))
                {
                    Button colorButton = new Button();
                    colorButton.Name = property.Name;
                    colorButton.BackColor = (Color)property.GetValue(DataObject);
                    colorButton.Click += ColorButton_Click;
                    if (hasBox)
                    {
                        colorButton.Width = 200;
                    }
                    DataInput.Controls.Add(colorButton, 1, DataInput.RowCount - 1);
                }
                else
                {
                    TextBox textBox = new TextBox();
                    textBox.Name = property.Name;
                    textBox.Text = property.GetValue(DataObject)?.ToString();
                    if (hasBox)
                    {
                        textBox.Width = 200;
                    }
                    DataInput.Controls.Add(textBox, 1, DataInput.RowCount - 1);
                }

                DataInput.Controls.Add(label, 0, DataInput.RowCount - 1);
            }

            FormBorderStyle = FormBorderStyle.FixedSingle;
            MaximizeBox = false;
            MinimizeBox = false;
        }

        private void EditForm_Load(object sender, EventArgs e)
        {

        }

        private void ColorButton_Click(object sender, EventArgs e)
        {
            Button colorButton = sender as Button;
            ColorDialog colorDialog = new ColorDialog();
            if (colorDialog.ShowDialog() == DialogResult.OK)
            {
                colorButton.BackColor = colorDialog.Color;
            }
        }

        private void OkBtn_Click(object sender, EventArgs e)
        {
            foreach (Control control in DataInput.Controls)
            {
                PropertyInfo propertyInfo = DataObject.GetType().GetProperty(control.Name);
                if (control is TextBox tbox)
                {
                    if (IsValidInput(tbox.Text, propertyInfo.PropertyType))
                    {
                        object value = Convert.ChangeType(tbox.Text, propertyInfo.PropertyType);
                        propertyInfo.SetValue(DataObject, value);
                    }
                    else
                    {
                        MessageBox.Show("Invalid input for " + propertyInfo.Name);
                        return;
                    }
                }
                else if (control is CheckBox cbox)
                {
                    propertyInfo.SetValue(DataObject, cbox.Checked);
                }
                else if (control is Button colorButton)
                {
                    propertyInfo.SetValue(DataObject, colorButton.BackColor);
                }
                else if (control is ComboBox comboBox)
                {
                    propertyInfo.SetValue(DataObject, new Font(comboBox.SelectedItem.ToString(), 9));
                }
            }
            OnOk?.Invoke(this, EventArgs.Empty);
            Close();
        }

        private void CancelBtn_Click(object sender, EventArgs e)
        {
            Close();
        }

        private bool IsValidInput(string input, Type targetType)
        {
            try
            {
                Convert.ChangeType(input, targetType);
                return true;
            }
            catch
            {
                return false;
            }
        }
    }
}﻿namespace MultigraphEditor.Forms
{
    partial class EditForm
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            tableLayoutPanel1 = new TableLayoutPanel();
            flowLayoutPanel1 = new FlowLayoutPanel();
            button1 = new Button();
            CancelBtn = new Button();
            OkBtn = new Button();
            DataInput = new TableLayoutPanel();
            tableLayoutPanel1.SuspendLayout();
            flowLayoutPanel1.SuspendLayout();
            SuspendLayout();
            // 
            // tableLayoutPanel1
            // 
            tableLayoutPanel1.AutoSize = true;
            tableLayoutPanel1.AutoSizeMode = AutoSizeMode.GrowAndShrink;
            tableLayoutPanel1.ColumnCount = 1;
            tableLayoutPanel1.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 100F));
            tableLayoutPanel1.Controls.Add(flowLayoutPanel1, 0, 1);
            tableLayoutPanel1.Controls.Add(DataInput, 0, 0);
            tableLayoutPanel1.Dock = DockStyle.Fill;
            tableLayoutPanel1.Location = new Point(0, 0);
            tableLayoutPanel1.Name = "tableLayoutPanel1";
            tableLayoutPanel1.RowCount = 2;
            tableLayoutPanel1.RowStyles.Add(new RowStyle(SizeType.Percent, 100F));
            tableLayoutPanel1.RowStyles.Add(new RowStyle(SizeType.Absolute, 40F));
            tableLayoutPanel1.Size = new Size(800, 450);
            tableLayoutPanel1.TabIndex = 0;
            // 
            // flowLayoutPanel1
            // 
            flowLayoutPanel1.Anchor = AnchorStyles.Top | AnchorStyles.Bottom;
            flowLayoutPanel1.Controls.Add(button1);
            flowLayoutPanel1.Controls.Add(CancelBtn);
            flowLayoutPanel1.Controls.Add(OkBtn);
            flowLayoutPanel1.Location = new Point(313, 413);
            flowLayoutPanel1.Name = "flowLayoutPanel1";
            flowLayoutPanel1.Size = new Size(174, 34);
            flowLayoutPanel1.TabIndex = 0;
            // 
            // button1
            // 
            button1.Location = new Point(3, 3);
            button1.Name = "button1";
            button1.Size = new Size(0, 0);
            button1.TabIndex = 0;
            button1.Text = "button1";
            button1.UseVisualStyleBackColor = true;
            // 
            // CancelBtn
            // 
            CancelBtn.Location = new Point(9, 3);
            CancelBtn.Name = "CancelBtn";
            CancelBtn.Size = new Size(75, 23);
            CancelBtn.TabIndex = 1;
            CancelBtn.Text = "Cancel";
            CancelBtn.UseVisualStyleBackColor = true;
            CancelBtn.Click += CancelBtn_Click;
            // 
            // OkBtn
            // 
            OkBtn.Location = new Point(90, 3);
            OkBtn.Name = "OkBtn";
            OkBtn.Size = new Size(75, 23);
            OkBtn.TabIndex = 2;
            OkBtn.Text = "Ok";
            OkBtn.UseVisualStyleBackColor = true;
            OkBtn.Click += OkBtn_Click;
            // 
            // DataInput
            // 
            DataInput.AutoSize = true;
            DataInput.AutoSizeMode = AutoSizeMode.GrowAndShrink;
            DataInput.ColumnCount = 2;
            DataInput.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 50F));
            DataInput.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 50F));
            DataInput.Dock = DockStyle.Fill;
            DataInput.Location = new Point(3, 3);
            DataInput.Name = "DataInput";
            DataInput.RowCount = 1;
            DataInput.RowStyles.Add(new RowStyle(SizeType.Percent, 50F));
            DataInput.Size = new Size(794, 404);
            DataInput.TabIndex = 1;
            // 
            // EditForm
            // 
            AcceptButton = OkBtn;
            AutoScaleDimensions = new SizeF(7F, 15F);
            AutoScaleMode = AutoScaleMode.Font;
            AutoSize = true;
            AutoSizeMode = AutoSizeMode.GrowAndShrink;
            CancelButton = CancelBtn;
            ClientSize = new Size(800, 450);
            Controls.Add(tableLayoutPanel1);
            Name = "EditForm";
            Text = "EditForm";
            Load += EditForm_Load;
            tableLayoutPanel1.ResumeLayout(false);
            tableLayoutPanel1.PerformLayout();
            flowLayoutPanel1.ResumeLayout(false);
            ResumeLayout(false);
            PerformLayout();
        }

        #endregion

        private TableLayoutPanel tableLayoutPanel1;
        private FlowLayoutPanel flowLayoutPanel1;
        private Button button1;
        private Button CancelBtn;
        private Button OkBtn;
        private TableLayoutPanel DataInput;
    }
}﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MultigraphEditor.Forms
{
    public class ExcludeFromFormAttribute : Attribute
    {

    }
}
using MultigraphEditor.Forms;
using MultigraphEditor.src.graph;
using MultigraphEditor.src.layers;
using MultigraphEditor.Src.design;
using MultigraphEditor.Src.graph;
using MultigraphEditor.Src.layers;
using System.Drawing.Printing;
using System.Net.NetworkInformation;
using static System.ComponentModel.Design.ObjectSelectorEditor;

namespace MultigraphEditor
{
    public partial class MainForm : Form
    {
        private ApplicationMode amode = ApplicationMode.None;
        public List<IMGraphEditorNode> nodeList = new List<IMGraphEditorNode>();
        public List<IMGraphEditorEdge> edgeList = new List<IMGraphEditorEdge>();
        public List<IMGraphLayer> Layers = new List<IMGraphLayer>();
        Type nodeType;
        Type edgeType;
        Type layerType;
        List<Type> algoList;

        bool isPanning = false;
        private Point lastMouseLocation = Point.Empty;
        private IMGraphEditorNode? selectedNode = null;
        private IMGraphEditorNode? selectedNodeForConnection = null;
        private List<IMGraphEditorEdge> selectedEdges = new List<IMGraphEditorEdge>();
        private List<LayoutPreviewControl> previewControls = new List<LayoutPreviewControl>();
        private enum ApplicationMode
        {
            None,
            AddVertex,
            Default, // Serves for moving objects
            Connect,
            View, // Serves for moving canvas
            Delete,
        }
        public MainForm(Type nodet, Type edget, Type layert, List<Type> alist)
        {
            InitializeComponent();
            nodeType = nodet;
            edgeType = edget;
            layerType = layert;
            algoList = alist;

            canvas.MouseDown += HandleMouseDown;
            canvas.MouseMove += HandleMouseMove;
            canvas.MouseUp += HandleMouseUp;
            LayoutPanel.Scroll += LayoutPanel_Scroll;
            LayoutPanel.MouseWheel += LayoutPanel_Scroll;
        }



        private void HandleMouseDown(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left)
            {
                LeftMouseDown(sender, e);
            }
            else if (e.Button == MouseButtons.Right)
            {
                RightMouseDown(sender, e);
            }
        }

        private void MainForm_Load(object sender, EventArgs e)
        {
            if (Layers.Count == 0)
            {
                IMGraphLayer layer = (IMGraphLayer)Activator.CreateInstance(layerType);
                layer.nodes = new List<IMGraphEditorNode>();
                layer.edges = new List<IMGraphEditorEdge>();
                Layers.Add(layer);
            }
            Bitmap canvasBitmap = new Bitmap(canvas.Width, canvas.Height);
            canvas.DrawToBitmap(canvasBitmap, new Rectangle(0, 0, canvas.Width, canvas.Height));
            LayoutPreviewControl prev = new LayoutPreviewControl(Layers[0], canvasBitmap);
            prev.CanvasInvalidated += (sender, e) =>
            {
                canvas.Invalidate(); // Invalidate the canvas on the main form
            };
            prev.LayerDeleted += (sender, e) =>
            {
                LayerDeletedHandler(sender, e);
            };
            LayoutPanel.RowStyles.Clear();
            LayoutPanel.Controls.Clear();

            LayoutPanel.RowStyles.Add(new RowStyle() { Height = 90, SizeType = SizeType.Absolute });
            LayoutPanel.RowCount++;
            LayoutPanel.Controls.Add(prev, 0, 0);
            previewControls.Add(prev);
            prev.MouseDown += HandleMouseDown;

            Button newLayer = new Button();
            newLayer.Text = "New Layer";
            newLayer.AutoSize = true;
            newLayer.Anchor = AnchorStyles.Left;
            newLayer.Anchor = AnchorStyles.Right;
            newLayer.Anchor = AnchorStyles.Top;
            newLayer.Click += AddLayer;
            LayoutPanel.Controls.Add(newLayer, 0, LayoutPanel.RowCount - 1);

            ToolTip toolTip = new ToolTip();
            toolTip.SetToolTip(AddBtn, "Add vertex");
            toolTip.SetToolTip(ViewBtn, "Move canvas around");
            toolTip.SetToolTip(MoveBtn, "Move vertices");
            toolTip.SetToolTip(ConnectBtn, "Connect vertices");
            toolTip.SetToolTip(GraphBtn, "Graph options");
        }



        private void AddBtn_Click(object sender, EventArgs e)
        {
            selectedEdges.Clear();
            selectedNode = null;
            selectedNodeForConnection = null;
            amode = ApplicationMode.AddVertex;
            UpdateLastClickedButton(sender);
        }

        private void ViewBtn_Click(object sender, EventArgs e)
        {
            selectedEdges.Clear();
            selectedNode = null;
            selectedNodeForConnection = null;
            amode = ApplicationMode.View;
            UpdateLastClickedButton(sender);
        }

        private void MoveBtn_Click(object sender, EventArgs e)
        {
            selectedEdges.Clear();
            selectedNode = null;
            selectedNodeForConnection = null;
            amode = ApplicationMode.Default;
            UpdateLastClickedButton(sender);
        }

        private void ConnectBtn_Click(object sender, EventArgs e)
        {
            selectedEdges.Clear();
            selectedNode = null;
            selectedNodeForConnection = null;
            amode = ApplicationMode.Connect;
            UpdateLastClickedButton(sender);
        }

        private void GraphBtn_Click(object sender, EventArgs e)
        {
            UpdateLastClickedButton(sender);
            selectedEdges.Clear();
            selectedNode = null;
            selectedNodeForConnection = null;

            ContextMenuStrip contextMenuStrip = new ContextMenuStrip();

            ToolStripMenuItem save = new ToolStripMenuItem("Save");
            ToolStripMenuItem export = new ToolStripMenuItem("Export");
            ToolStripMenuItem import = new ToolStripMenuItem("Import");
            ToolStripMenuItem adjacency = new ToolStripMenuItem("Adjacency matrix");
            ToolStripMenuItem incidence = new ToolStripMenuItem("Incidence matrix");
            ToolStripMenuItem distance = new ToolStripMenuItem("Distance matrix");

            contextMenuStrip.Items.Add(save);
            contextMenuStrip.Items.Add(export);
            contextMenuStrip.Items.Add(import);
            contextMenuStrip.Items.Add(adjacency);
            contextMenuStrip.Items.Add(incidence);
            contextMenuStrip.Items.Add(distance);

            adjacency.Click += (sender, e) => CreateMatrixForm(Layers, "adj");
            incidence.Click += (sender, e) => CreateMatrixForm(Layers, "inc");
            distance.Click += (sender, e) => CreateMatrixForm(Layers, "dis");

            contextMenuStrip.Show(GraphBtn, new System.Drawing.Point(0, GraphBtn.Height));
        }

        private void AlgorithmsBtn_Click(object sender, EventArgs e)
        {
            selectedEdges.Clear();
            selectedNode = null;
            selectedNodeForConnection = null;
            UpdateLastClickedButton(sender);
            AlghoritmForm alghorimtForm = new AlghoritmForm(Layers, algoList);
            alghorimtForm.Show();
        }

        private void RemoveBtn_Click(object sender, EventArgs e)
        {
            selectedEdges.Clear();
            selectedNode = null;
            selectedNodeForConnection = null;
            amode = ApplicationMode.Delete;
            UpdateLastClickedButton(sender);
        }

        private void CreateMatrixForm(List<IMGraphLayer> layerList, string type)
        {
            MatrixForm matrixForm = new MatrixForm(layerList, type);
            matrixForm.Show();
        }

        private void canvas_Paint(object sender, PaintEventArgs e)
        {
            Graphics g = e.Graphics;

            foreach (IMGraphLayer layer in Layers)
            {
                if (layer.Active)
                {
                    foreach (IMGraphEditorNode node in layer.nodes)
                    {
                        node.Draw(g, layer);
                    }
                    foreach (IMGraphEditorEdge edge in layer.edges)
                    {
                        if (layer.nodes.Contains(edge.SourceDrawable) && layer.nodes.Contains(edge.TargetDrawable))
                        {
                            edge.Draw(g, layer);
                        }
                    }
                }
            }
        }

        private void LeftMouseDown(object sender, MouseEventArgs e)
        {
            if (amode == ApplicationMode.AddVertex)
            {
                IMGraphEditorNode node = (IMGraphEditorNode)Activator.CreateInstance(nodeType);

                using (EditForm editform = new EditForm(node))
                {
                    editform.OnOk += (s, n) =>
                    {
                        editform.Close();
                        node.X = e.X;
                        node.Y = e.Y;
                        nodeList.Add(node);

                        foreach (IMGraphLayer layer in Layers)
                        {
                            if (layer.Active)
                            {
                                layer.nodes.Add(node);
                            }
                        }
                        canvas.Invalidate();
                    };
                    editform.ShowDialog();
                }
            }

            if (amode == ApplicationMode.View)
            {
                lastMouseLocation = e.Location;
                isPanning = true;
            }

            if (amode == ApplicationMode.Default)
            {
                foreach (IMGraphEditorNode node in nodeList)
                {
                    foreach (IMGraphLayer layer in Layers)
                    {
                        if (layer.Active)
                        {
                            if (node.IsInside(e.X, e.Y))
                            {
                                selectedNode = node;
                                lastMouseLocation = e.Location;
                                break;
                            }
                        }
                    }
                }

                foreach (IMGraphEditorEdge edge in edgeList)
                {
                    foreach (IMGraphLayer layer in Layers)
                    {
                        if (layer.Active)
                        {
                            if (edge.IsInsideControlPoint(e.X, e.Y))
                            {
                                selectedEdges.Add(edge);
                                lastMouseLocation = e.Location;
                                break;
                            }
                        }
                    }
                }
            }

            if (amode == ApplicationMode.Delete)
            {
                List<IMGraphEditorNode> nodesToDelete = new List<IMGraphEditorNode>();
                List<IMGraphEditorEdge> edgesToDelete = new List<IMGraphEditorEdge>();

                foreach (IMGraphEditorNode node in nodeList)
                {
                    foreach (IMGraphLayer layer in Layers)
                    {
                        if (layer.Active)
                        {
                            if (node.IsInside(e.X, e.Y))
                            {
                                nodesToDelete.Add(node);
                                foreach (IMGraphEditorEdge edge in edgeList)
                                {
                                    if (edge.SourceDrawable == node || edge.TargetDrawable == node)
                                    {
                                        edgeList.Remove(edge);
                                    }
                                }
                                foreach (IMGraphLayer l in Layers)
                                {
                                    if (l.Active)
                                    {
                                        l.nodes.Remove(node);
                                    }
                                }
                                canvas.Invalidate();
                                break;
                            }
                        }
                    }
                }

                foreach (IMGraphEditorEdge edge in edgeList)
                {
                    foreach (IMGraphLayer layer in Layers)
                    {
                        if (layer.Active)
                        {
                            if (edge.IsInsideControlPoint(e.X, e.Y))
                            {
                                edgesToDelete.Add(edge);
                                foreach (IMGraphEditorNode node in nodeList)
                                {
                                    node.Edges.Remove(edge);
                                }
                                foreach (IMGraphLayer l in Layers)
                                {
                                    if (l.Active)
                                    {
                                        l.edges.Remove(edge);
                                    }
                                }
                                canvas.Invalidate();
                                break;
                            }
                        }
                    }
                }
                nodeList.RemoveAll(n => nodesToDelete.Contains(n));
                edgeList.RemoveAll(n => edgesToDelete.Contains(n));
            }

            if (amode == ApplicationMode.Connect)
            {
                foreach (IMGraphEditorNode node in nodeList)
                {
                    foreach (IMGraphLayer layer in Layers)
                    {
                        if (layer.Active)
                        {
                            if (node.IsInside(e.X, e.Y))
                            {
                                selectedNode = node;
                                if (selectedNodeForConnection == null)
                                {
                                    selectedNodeForConnection = node;
                                    selectedNode = null;
                                    break;
                                }
                                else
                                {
                                    // Check if nodes are at least in one same layer
                                    if (selectedNodeForConnection != null && selectedNode != null)
                                    {
                                        bool areInSameLayer = false;
                                        foreach (IMGraphLayer elayer in Layers)
                                        {
                                            if (elayer.Active)
                                            {
                                                if (elayer.nodes.Contains(selectedNode) && elayer.nodes.Contains(selectedNodeForConnection))
                                                {
                                                    areInSameLayer = true;
                                                }
                                            }
                                        }
                                        if (!areInSameLayer)
                                        {
                                            MessageBox.Show("Nodes are not in the same layer");
                                            selectedNodeForConnection = null;
                                            selectedNode = null;
                                            break;
                                        }
                                    }
                                    IMGraphEditorEdge edge = (IMGraphEditorEdge)Activator.CreateInstance(edgeType);

                                    using (EditForm editform = new EditForm(edge))
                                    {
                                        editform.OnOk += (s, e) =>
                                        {
                                            editform.Close();
                                            edge.PopulateNode(selectedNodeForConnection, selectedNode, edge.Bidirectional, edge.Weight);
                                            edge.PopulateDrawing(selectedNodeForConnection, selectedNode);

                                            edge.SourceDrawable = selectedNodeForConnection;
                                            edge.TargetDrawable = selectedNode;
                                            edgeList.Add(edge);
                                            
                                            selectedNode.Edges.Add(edge);
                                            selectedNodeForConnection.Edges.Add(edge);

                                            foreach (IMGraphLayer layer in Layers)
                                            {
                                                if (layer.Active && layer.nodes.Contains(selectedNode) && layer.nodes.Contains(selectedNodeForConnection))
                                                {
                                                    layer.edges.Add(edge);
                                                }
                                            }
                                        };
                                        editform.ShowDialog();
                                    }
                                }
                                selectedNodeForConnection = null;
                                selectedNode = null;
                                canvas.Invalidate();
                            }

                        }

                    }

                }

            }
        }

        private void HandleMouseMove(object sender, MouseEventArgs e)
        {
            if (amode == ApplicationMode.Default)
            {
                if (selectedNode != null)
                {
                    float dx = e.X - lastMouseLocation.X;
                    float dy = e.Y - lastMouseLocation.Y;
                    selectedNode.X += dx;
                    selectedNode.Y += dy;
                    lastMouseLocation = e.Location;
                    canvas.Invalidate();
                }

                if (selectedEdges != null && selectedEdges.Count > 0)
                {
                    float dx = e.X - lastMouseLocation.X;
                    float dy = e.Y - lastMouseLocation.Y;

                    HashSet<IMGraphEditorNode> movedNodes = new HashSet<IMGraphEditorNode>();

                    foreach (var edge in selectedEdges)
                    {
                        foreach (IMGraphEditorNode node in nodeList)
                        {
                            if (edge.SourceDrawable == node || edge.TargetDrawable == node)
                            {
                                if (!movedNodes.Contains(node))
                                {
                                    node.X += dx;
                                    node.Y += dy;
                                    movedNodes.Add(node);
                                }
                            }
                        }
                    }

                    lastMouseLocation = e.Location;
                    canvas.Invalidate();
                }
            }

            if (amode == ApplicationMode.View)
            {
                if (isPanning)
                {
                    int dx = e.X - lastMouseLocation.X;
                    int dy = e.Y - lastMouseLocation.Y;

                    foreach (IMGraphEditorNode node in nodeList)
                    {
                        node.X += dx;
                        node.Y += dy;
                    }

                    lastMouseLocation = e.Location;
                    canvas.Invalidate();
                }
            }
        }

        private void HandleMouseUp(object sender, MouseEventArgs e)
        {
            selectedNode = null;
            selectedEdges.Clear();
            if (amode == ApplicationMode.View)
            {
                isPanning = false;
            }
            UpdatePreviewPanels();
        }

        private void RightMouseDown(object sender, MouseEventArgs e)
        {
            foreach (IMGraphEditorEdge edge in edgeList)
            {
                foreach (IMGraphLayer layer in Layers)
                {
                    if (layer.Active)
                    {
                        if (edge.IsInside(e.X, e.Y))
                        {
                            using (EditForm editform = new EditForm(edge))
                            {
                                editform.OnOk += (s, e) =>
                                {
                                    editform.Close();
                                    canvas.Invalidate();
                                };
                                editform.ShowDialog();
                            }
                        }
                    }
                }
            }

            foreach (IMGraphEditorNode node in nodeList)
            {
                foreach (IMGraphLayer layer in Layers)
                {
                    if (layer.Active)
                    {
                        if (node.IsInside(e.X, e.Y))
                        {
                            using (EditForm editform = new EditForm(node))
                            {
                                editform.OnOk += (s, e) =>
                                {
                                    editform.Close();
                                    canvas.Invalidate();
                                };
                                editform.ShowDialog();
                            }
                        }
                    }
                }
            }
        }

        private void AddLayer(object? sender, EventArgs e)
        {
            IMGraphLayer layer = (IMGraphLayer)Activator.CreateInstance(layerType);
            layer.nodes = new List<IMGraphEditorNode>();
            layer.edges = new List<IMGraphEditorEdge>();
            Layers.Add(layer);

            Bitmap canvasBitmap = new Bitmap(canvas.Width, canvas.Height);
            canvas.DrawToBitmap(canvasBitmap, new Rectangle(0, 0, canvas.Width, canvas.Height));
            LayoutPreviewControl prev = new LayoutPreviewControl(Layers[Layers.IndexOf(layer)], canvasBitmap);
            prev.LayerDeleted += (sender, e) =>
            {
                LayerDeletedHandler(sender, e);
            };
            prev.CanvasInvalidated += (sender, e) =>
            {
                canvas.Invalidate();
            };

            LayoutPanel.RowCount--;
            LayoutPanel.RowCount++;
            LayoutPanel.RowStyles.Add(new RowStyle() { Height = 90, SizeType = SizeType.Absolute });
            LayoutPanel.Controls.Add(prev, LayoutPanel.RowCount - 1, 0);
            previewControls.Add(prev);
            prev.MouseDown += HandleMouseDown;
            LayoutPanel.RowCount++;
        }

        private Control? GetControlByTag(string tag)
        {
            foreach (Control control in Controls)
            {
                if (control.Tag != null && control.Tag.ToString() == tag)
                {
                    return control;
                }
            }
            return null;
        }

        private void LayoutPanel_Scroll(object sender, ScrollEventArgs e)
        {
            UpdatePreviewPanels();
        }

        private void LayoutPanel_Scroll(object? sender, MouseEventArgs e)
        {
            UpdatePreviewPanels();
        }

        private void UpdatePreviewPanels()
        {
            foreach (IMGraphLayer l in Layers)
            {
                foreach (Control c in LayoutPanel.Controls)
                {
                    if (c is LayoutPreviewControl)
                    {
                        if (c.Tag.ToString() == l.Identifier.ToString())
                        {
                            LayoutPreviewControl lp = (LayoutPreviewControl)c;
                            Bitmap bitmap = new Bitmap(canvas.Width, canvas.Height);
                            using (Graphics g = Graphics.FromImage(bitmap))
                            {
                                foreach (IMGraphEditorNode node in l.nodes)
                                {
                                    node.Draw(g, l);
                                }
                                foreach (IEdgeDrawable edge in l.edges)
                                {
                                    edge.Draw(g, l);
                                }
                            }
                            lp.PaintPreviewPanel(bitmap);
                        }
                    }
                }
            }
        }

        private void LayerDeletedHandler(object sender, IMGraphLayer e)
        {
            if (Layers.Count == 1)
            {
                MessageBox.Show("Cannot delete the last layer");
                return;
            }
            Layers.Remove(Layers[Layers.IndexOf(e)]);
            LayoutPanel.Controls.Remove((Control)sender);
            previewControls.Remove((LayoutPreviewControl)sender);
            LayoutPanel.RowCount--;
        }

        private void UpdateLastClickedButton(object sender)
        {
            foreach (Control b in ButtonPanel.Controls)
            {
                if (b is Button)
                {
                    Button button = (Button)b;
                    if (button == sender)
                    {
                        button.BackColor = Color.FromArgb(204, 218, 229);
                    }
                    else
                    {
                        button.BackColor = Color.White;
                    }
                }
            }
        }
    }
}
﻿namespace MultigraphEditor
{
    partial class MainForm
    {
        /// <summary>
        ///  Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        ///  Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        ///  Required method for Designer support - do not modify
        ///  the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            MainLayout = new TableLayoutPanel();
            ButtonPanel = new FlowLayoutPanel();
            button1 = new Button();
            ViewBtn = new Button();
            MoveBtn = new Button();
            AddBtn = new Button();
            ConnectBtn = new Button();
            AlgorithmsBtn = new Button();
            RemoveBtn = new Button();
            GraphBtn = new Button();
            canvas = new Src.design.DoubleBufferedPanel();
            LayoutPanel = new TableLayoutPanel();
            MainLayout.SuspendLayout();
            ButtonPanel.SuspendLayout();
            SuspendLayout();
            // 
            // MainLayout
            // 
            MainLayout.CellBorderStyle = TableLayoutPanelCellBorderStyle.InsetDouble;
            MainLayout.ColumnCount = 2;
            MainLayout.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 100F));
            MainLayout.ColumnStyles.Add(new ColumnStyle(SizeType.Absolute, 200F));
            MainLayout.Controls.Add(ButtonPanel, 0, 1);
            MainLayout.Controls.Add(canvas, 0, 0);
            MainLayout.Controls.Add(LayoutPanel, 1, 0);
            MainLayout.Dock = DockStyle.Fill;
            MainLayout.Location = new Point(0, 0);
            MainLayout.Name = "MainLayout";
            MainLayout.RowCount = 2;
            MainLayout.RowStyles.Add(new RowStyle(SizeType.Percent, 100F));
            MainLayout.RowStyles.Add(new RowStyle(SizeType.Absolute, 40F));
            MainLayout.Size = new Size(800, 450);
            MainLayout.TabIndex = 0;
            // 
            // ButtonPanel
            // 
            ButtonPanel.Anchor = AnchorStyles.Top | AnchorStyles.Bottom;
            MainLayout.SetColumnSpan(ButtonPanel, 2);
            ButtonPanel.Controls.Add(button1);
            ButtonPanel.Controls.Add(ViewBtn);
            ButtonPanel.Controls.Add(MoveBtn);
            ButtonPanel.Controls.Add(AddBtn);
            ButtonPanel.Controls.Add(ConnectBtn);
            ButtonPanel.Controls.Add(AlgorithmsBtn);
            ButtonPanel.Controls.Add(RemoveBtn);
            ButtonPanel.Controls.Add(GraphBtn);
            ButtonPanel.Location = new Point(111, 407);
            ButtonPanel.Margin = new Padding(0);
            ButtonPanel.Name = "ButtonPanel";
            ButtonPanel.Size = new Size(577, 40);
            ButtonPanel.TabIndex = 0;
            // 
            // button1
            // 
            button1.Location = new Point(3, 3);
            button1.Name = "button1";
            button1.Size = new Size(0, 0);
            button1.TabIndex = 0;
            button1.Text = "button1";
            button1.UseVisualStyleBackColor = true;
            // 
            // ViewBtn
            // 
            ViewBtn.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left;
            ViewBtn.Image = Properties.Resources.view;
            ViewBtn.ImageAlign = ContentAlignment.MiddleLeft;
            ViewBtn.Location = new Point(9, 3);
            ViewBtn.Name = "ViewBtn";
            ViewBtn.Size = new Size(55, 23);
            ViewBtn.TabIndex = 1;
            ViewBtn.Text = "View";
            ViewBtn.TextAlign = ContentAlignment.MiddleRight;
            ViewBtn.TextImageRelation = TextImageRelation.TextBeforeImage;
            ViewBtn.UseVisualStyleBackColor = true;
            ViewBtn.Click += ViewBtn_Click;
            // 
            // MoveBtn
            // 
            MoveBtn.Image = Properties.Resources.move;
            MoveBtn.ImageAlign = ContentAlignment.MiddleLeft;
            MoveBtn.Location = new Point(70, 3);
            MoveBtn.Name = "MoveBtn";
            MoveBtn.Size = new Size(65, 23);
            MoveBtn.TabIndex = 2;
            MoveBtn.Text = "Move";
            MoveBtn.TextAlign = ContentAlignment.MiddleRight;
            MoveBtn.TextImageRelation = TextImageRelation.TextBeforeImage;
            MoveBtn.UseVisualStyleBackColor = true;
            MoveBtn.Click += MoveBtn_Click;
            // 
            // AddBtn
            // 
            AddBtn.Image = Properties.Resources.add;
            AddBtn.ImageAlign = ContentAlignment.MiddleLeft;
            AddBtn.Location = new Point(141, 3);
            AddBtn.Name = "AddBtn";
            AddBtn.Size = new Size(55, 23);
            AddBtn.TabIndex = 3;
            AddBtn.Text = "Add";
            AddBtn.TextAlign = ContentAlignment.MiddleRight;
            AddBtn.TextImageRelation = TextImageRelation.TextBeforeImage;
            AddBtn.Click += AddBtn_Click;
            // 
            // ConnectBtn
            // 
            ConnectBtn.Image = Properties.Resources.connect;
            ConnectBtn.ImageAlign = ContentAlignment.MiddleLeft;
            ConnectBtn.Location = new Point(202, 3);
            ConnectBtn.Name = "ConnectBtn";
            ConnectBtn.Size = new Size(80, 23);
            ConnectBtn.TabIndex = 4;
            ConnectBtn.Text = "Connect";
            ConnectBtn.TextAlign = ContentAlignment.MiddleRight;
            ConnectBtn.TextImageRelation = TextImageRelation.TextBeforeImage;
            ConnectBtn.UseVisualStyleBackColor = true;
            ConnectBtn.Click += ConnectBtn_Click;
            // 
            // AlgorithmsBtn
            // 
            AlgorithmsBtn.Image = Properties.Resources.algo;
            AlgorithmsBtn.ImageAlign = ContentAlignment.MiddleLeft;
            AlgorithmsBtn.Location = new Point(288, 3);
            AlgorithmsBtn.Name = "AlgorithmsBtn";
            AlgorithmsBtn.Size = new Size(90, 23);
            AlgorithmsBtn.TabIndex = 5;
            AlgorithmsBtn.Text = "Algorithms";
            AlgorithmsBtn.TextAlign = ContentAlignment.MiddleRight;
            AlgorithmsBtn.TextImageRelation = TextImageRelation.TextBeforeImage;
            AlgorithmsBtn.UseVisualStyleBackColor = true;
            AlgorithmsBtn.Click += AlgorithmsBtn_Click;
            // 
            // RemoveBtn
            // 
            RemoveBtn.Image = Properties.Resources.remove;
            RemoveBtn.ImageAlign = ContentAlignment.MiddleRight;
            RemoveBtn.Location = new Point(384, 3);
            RemoveBtn.Name = "RemoveBtn";
            RemoveBtn.Size = new Size(111, 23);
            RemoveBtn.TabIndex = 7;
            RemoveBtn.Text = "Remove object";
            RemoveBtn.TextImageRelation = TextImageRelation.TextBeforeImage;
            RemoveBtn.UseVisualStyleBackColor = true;
            RemoveBtn.Click += RemoveBtn_Click;
            // 
            // GraphBtn
            // 
            GraphBtn.Image = Properties.Resources.graph;
            GraphBtn.ImageAlign = ContentAlignment.MiddleLeft;
            GraphBtn.Location = new Point(501, 3);
            GraphBtn.Name = "GraphBtn";
            GraphBtn.Size = new Size(66, 23);
            GraphBtn.TabIndex = 6;
            GraphBtn.Text = "Graph";
            GraphBtn.TextAlign = ContentAlignment.MiddleRight;
            GraphBtn.TextImageRelation = TextImageRelation.TextBeforeImage;
            GraphBtn.UseVisualStyleBackColor = true;
            GraphBtn.Click += GraphBtn_Click;
            // 
            // canvas
            // 
            canvas.Dock = DockStyle.Fill;
            canvas.Location = new Point(6, 6);
            canvas.Name = "canvas";
            canvas.Size = new Size(585, 395);
            canvas.TabIndex = 1;
            canvas.Paint += canvas_Paint;
            // 
            // LayoutPanel
            // 
            LayoutPanel.AutoScroll = true;
            LayoutPanel.CellBorderStyle = TableLayoutPanelCellBorderStyle.Single;
            LayoutPanel.ColumnCount = 1;
            LayoutPanel.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 100F));
            LayoutPanel.Dock = DockStyle.Fill;
            LayoutPanel.Location = new Point(600, 6);
            LayoutPanel.Name = "LayoutPanel";
            LayoutPanel.RowCount = 1;
            LayoutPanel.RowStyles.Add(new RowStyle(SizeType.Absolute, 80F));
            LayoutPanel.Size = new Size(194, 395);
            LayoutPanel.TabIndex = 2;
            // 
            // MainForm
            // 
            AutoScaleDimensions = new SizeF(7F, 15F);
            AutoScaleMode = AutoScaleMode.Font;
            ClientSize = new Size(800, 450);
            Controls.Add(MainLayout);
            Name = "MainForm";
            Text = "Multigraph Editor";
            Load += MainForm_Load;
            MainLayout.ResumeLayout(false);
            ButtonPanel.ResumeLayout(false);
            ResumeLayout(false);
        }

        #endregion

        private TableLayoutPanel MainLayout;
        private Src.design.DoubleBufferedPanel canvas;
        private FlowLayoutPanel ButtonPanel;
        private Button button1;
        private Button ViewBtn;
        private Button MoveBtn;
        private Button AddBtn;
        private Button ConnectBtn;
        private Button AlgorithmsBtn;
        private Button GraphBtn;
        private TableLayoutPanel LayoutPanel;
        private Button RemoveBtn;
    }
}
﻿using MultigraphEditor.Src.layers;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Drawing.Text;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace MultigraphEditor.Forms
{
    public partial class MatrixForm : Form
    {
        private string matrixType;
        private IMGraphLayer? selectedLayer = null;
        private ComboBox layerComboBox;
        TableLayoutPanel orginized = new TableLayoutPanel();

        public MatrixForm(List<IMGraphLayer> layerList, string type)
        {
            InitializeComponent();
            orginized.RowCount = 1;
            orginized.ColumnCount = 1;
            orginized.RowStyles.Add(new RowStyle(SizeType.AutoSize));
            orginized.ColumnStyles.Add(new ColumnStyle(SizeType.AutoSize));
            orginized.Dock = DockStyle.Fill;
            orginized.AutoSize = true;

            AutoSize = true;
            matrixType = type;
            layerComboBox = new ComboBox
            {
                DropDownStyle = ComboBoxStyle.DropDownList,
                Name = "layerComboBox",
                Width = 200,
                Location = new Point(10, 10)
            };

            foreach (IMGraphLayer l in layerList)
            {
                layerComboBox.Items.Add(l);
            }

            layerComboBox.DisplayMember = "Name";
            if (layerComboBox.Items.Count > 0)
            {
                layerComboBox.SelectedIndex = 0;
            }

            layerComboBox.SelectedIndexChanged += CreateMatrix;
            layerComboBox.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right | AnchorStyles.Bottom;
            orginized.Controls.Add(layerComboBox);
            Controls.Add(orginized);
            AutoSize = true;
            AutoSizeMode = AutoSizeMode.GrowAndShrink;
            CreateMatrix(layerComboBox, EventArgs.Empty);

            FormBorderStyle = FormBorderStyle.FixedSingle;
            MaximizeBox = false;
            MinimizeBox = false;
        }

        private void CreateMatrix(object? sender, EventArgs e)
        {
            if (layerComboBox.SelectedItem is IMGraphLayer layer)
            {
                selectedLayer = layer;
                switch (matrixType)
                {
                    case "adj":
                        Text = "Adjacency Matrix";
                        GenerateAdjacencyMatrix(layer);
                        break;
                    case "inc":
                        Text = "Incidence Matrix";
                        GenerateIncidenceMatrix(layer);
                        break;
                    case "dis":
                        Text = "Distance Matrix";
                        GenerateDistanceMatrix(layer);
                        break;
                }
            }
        }

        private void GenerateAdjacencyMatrix(IMGraphLayer layer)
        {
            ClearControlsExceptComboBox();

            var nodes = layer.nodes;
            var edges = layer.edges;

            int[,] adjacencyMatrix = new int[nodes.Count, nodes.Count];

            for (int i = 0; i < nodes.Count; i++)
            {
                for (int j = 0; j < nodes.Count; j++)
                {
                    adjacencyMatrix[i, j] = 0;
                }
            }

            foreach (var edge in edges)
            {
                int startIndex = nodes.IndexOf((Src.graph.IMGraphEditorNode)edge.Source);
                int endIndex = nodes.IndexOf((Src.graph.IMGraphEditorNode)edge.Target);
                adjacencyMatrix[startIndex, endIndex] = 1;
                if (edge.Bidirectional)
                {
                    adjacencyMatrix[endIndex, startIndex] = 1;
                }
            }

            TextBox matrixDisplay = new TextBox
            {
                Multiline = true,
                Width = 400,
                Height = 300,
                ScrollBars = ScrollBars.Both,
                ReadOnly = true
            };

            for (int i = 0; i < nodes.Count; i++)
            {
                for (int j = 0; j < nodes.Count; j++)
                {
                    matrixDisplay.Text += adjacencyMatrix[i, j] + ", ";
                }
                matrixDisplay.Text += Environment.NewLine;
            }

            orginized.RowCount = 2;
            orginized.RowStyles.Add(new RowStyle(SizeType.AutoSize));
            orginized.Controls.Add(matrixDisplay, 1, 1);
        }

        public void GenerateIncidenceMatrix(IMGraphLayer layer)
        {
            ClearControlsExceptComboBox();

            var nodes = layer.nodes;
            var edges = layer.edges;

            int[,] incidenceMatrix = new int[nodes.Count, edges.Count];

            for (int i = 0; i < nodes.Count; i++)
            {
                for (int j = 0; j < edges.Count; j++)
                {
                    incidenceMatrix[i, j] = 0;
                }
            }

            for (int j = 0; j < edges.Count; j++)
            {
                var edge = edges[j];
                int nodeUIndex = nodes.IndexOf((Src.graph.IMGraphEditorNode)edge.Source);
                int nodeVIndex = nodes.IndexOf((Src.graph.IMGraphEditorNode)edge.Target);
                int weight = edge.Weight;

                if (edge.Bidirectional)
                {
                    incidenceMatrix[nodeUIndex, j] = weight;
                    incidenceMatrix[nodeVIndex, j] = weight;
                }
                else
                {
                    incidenceMatrix[nodeUIndex, j] = weight;
                    incidenceMatrix[nodeVIndex, j] = -weight;
                }
            }

            TextBox matrixDisplay = new TextBox
            {
                Multiline = true,
                Width = 400,
                Height = 300,
                ScrollBars = ScrollBars.Both,
                ReadOnly = true
            };

            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < nodes.Count; i++)
            {
                for (int j = 0; j < edges.Count; j++)
                {
                    sb.Append(" " + incidenceMatrix[i, j] + ", ");
                }
                sb.AppendLine();
            }
            matrixDisplay.Text = sb.ToString();

            orginized.RowCount = 2;
            orginized.RowStyles.Add(new RowStyle(SizeType.AutoSize));
            orginized.Controls.Add(matrixDisplay, 1, 1);
        }

        public void GenerateDistanceMatrix(IMGraphLayer layer)
        {
            ClearControlsExceptComboBox();

            var nodes = layer.nodes;
            var edges = layer.edges;

            double[,] distanceMatrix = new double[nodes.Count, nodes.Count];
            for (int i = 0; i < nodes.Count; i++)
            {
                for (int j = 0; j < nodes.Count; j++)
                {
                    if (i == j)
                        distanceMatrix[i, j] = 0;
                    else
                        distanceMatrix[i, j] = double.PositiveInfinity;
                }
            }

            foreach (var edge in edges)
            {
                int nodeUIndex = nodes.IndexOf((Src.graph.IMGraphEditorNode)edge.Source);
                int nodeVIndex = nodes.IndexOf((Src.graph.IMGraphEditorNode)edge.Target);
                double weight = edge.Weight;

                distanceMatrix[nodeUIndex, nodeVIndex] = weight;
                if (edge.Bidirectional)
                {
                    distanceMatrix[nodeVIndex, nodeUIndex] = weight;
                }
            }

            for (int k = 0; k < nodes.Count; k++)
            {
                for (int i = 0; i < nodes.Count; i++)
                {
                    for (int j = 0; j < nodes.Count; j++)
                    {
                        if (distanceMatrix[i, k] + distanceMatrix[k, j] < distanceMatrix[i, j])
                        {
                            distanceMatrix[i, j] = distanceMatrix[i, k] + distanceMatrix[k, j];
                        }
                    }
                }
            }

            TextBox matrixDisplay = new TextBox
            {
                Multiline = true,
                Width = 400,
                Height = 300,
                ScrollBars = ScrollBars.Both,
                ReadOnly = true
            };

            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < nodes.Count; i++)
            {
                for (int j = 0; j < nodes.Count; j++)
                {
                    string distance = distanceMatrix[i, j] == double.PositiveInfinity ? "∞" : distanceMatrix[i, j].ToString();
                    sb.Append(distance.PadLeft(4) + ", ");
                }
                sb.AppendLine();
            }
            matrixDisplay.Text = sb.ToString();

            orginized.RowCount = 2;
            orginized.RowStyles.Add(new RowStyle(SizeType.AutoSize));
            orginized.Controls.Add(matrixDisplay, 0, 1);
        }

        private void ClearControlsExceptComboBox()
        {
            var controlsToRemove = orginized.Controls.Cast<Control>()
                                         .Where(ctrl => ctrl != layerComboBox)
                                         .ToList();

            foreach (var ctrl in controlsToRemove)
            {
                orginized.Controls.Remove(ctrl);
                ctrl.Dispose();
            }
        }
    }
}
﻿namespace MultigraphEditor.Forms
{
    partial class MatrixForm
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            SuspendLayout();
            // 
            // MatrixForm
            // 
            AutoScaleDimensions = new SizeF(7F, 15F);
            AutoScaleMode = AutoScaleMode.Font;
            ClientSize = new Size(800, 450);
            Name = "MatrixForm";
            Text = "MatrixForm";
            ResumeLayout(false);
        }

        #endregion
    }
}// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("MultigraphEditor")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+dadc9368c14f4f78b713548f1c521a0f1e683638")]
[assembly: System.Reflection.AssemblyProductAttribute("MultigraphEditor")]
[assembly: System.Reflection.AssemblyTitleAttribute("MultigraphEditor")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
[assembly: System.Runtime.Versioning.TargetPlatformAttribute("Windows7.0")]
[assembly: System.Runtime.Versioning.SupportedOSPlatformAttribute("Windows7.0")]

// Generated by the MSBuild WriteCodeFragment class.

// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.Drawing;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;
global using global::System.Windows.Forms;
using MultigraphEditor.src.graph;
using MultigraphEditor.src.layers;
using MultigraphEditor.Src.alghoritm;
using MultigraphEditor.Src.algorithm;
using MultigraphEditor.Src.layers;

namespace MultigraphEditor
{
    internal static class Program
    {
        /// <summary>
        ///  The main entry point for the application.
        /// </summary>
        [STAThread]
        static void Main()
        {
            Type NodeType = typeof(MGraphEditorNode);
            Type EdgeType = typeof(MGraphEditorEdge);
            Type LayerType = typeof(MGraphLayer);
            List<Type> mGraphAlgorithms = new List<Type>();
            mGraphAlgorithms.Add(typeof(DijkstraAlgorithm));

            // To customize application configuration such as set high DPI settings or default font,
            // see https://aka.ms/applicationconfiguration.
            ApplicationConfiguration.Initialize();
            Application.Run(new MainForm(NodeType, EdgeType, LayerType, mGraphAlgorithms));
        }
    }
}
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MultigraphEditor.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("MultigraphEditor.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap add {
            get {
                object obj = ResourceManager.GetObject("add", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap algo {
            get {
                object obj = ResourceManager.GetObject("algo", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap connect {
            get {
                object obj = ResourceManager.GetObject("connect", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap edit {
            get {
                object obj = ResourceManager.GetObject("edit", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap graph {
            get {
                object obj = ResourceManager.GetObject("graph", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap invisible {
            get {
                object obj = ResourceManager.GetObject("invisible", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap move {
            get {
                object obj = ResourceManager.GetObject("move", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap remove {
            get {
                object obj = ResourceManager.GetObject("remove", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap setting {
            get {
                object obj = ResourceManager.GetObject("setting", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap trash {
            get {
                object obj = ResourceManager.GetObject("trash", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap view {
            get {
                object obj = ResourceManager.GetObject("view", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
    }
}
﻿using MultigraphEditor.src.graph;
using MultigraphEditor.Src.alghoritm;
using MultigraphEditor.Src.layers;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MultigraphEditor.Src.algorithm
{
    internal class DijkstraAlgorithm : IMGraphAlgorithm
    {
        public string Name { get; } = "Dijkstra's Algorithm";

        public List<INode> FindPath(INode start, INode target, IMGraphLayer targetLayer)
        {
            var openSet = new PriorityQueue<INode, double>();
            var cameFrom = new Dictionary<INode, INode>();
            var gScore = new Dictionary<INode, double>();
            foreach (var node in targetLayer.nodes)
            {
                gScore[node] = double.PositiveInfinity;
            }
            gScore[start] = 0;

            openSet.Enqueue(start, 0);

            while (openSet.Count > 0)
            {
                var current = openSet.Dequeue();

                if (current.Equals(target))
                {
                    var res = ReconstructPath(cameFrom, target);
                    res.Insert(0, start);
                    res.Reverse();
                    return res;
                }

                foreach (var edge in current.Edges)
                {
                    if (targetLayer.edges.Contains(edge) && targetLayer.nodes.Contains(edge.Target))
                    {
                        INode neighbor = edge.Target;
                        double tentativeGScore = gScore[current] + edge.Weight;

                        if (tentativeGScore < gScore[neighbor])
                        {
                            cameFrom[neighbor] = current;
                            gScore[neighbor] = tentativeGScore;

                            if (!openSet.UnorderedItems.Any(item => item.Element.Equals(neighbor)))
                            {
                                openSet.Enqueue(neighbor, gScore[neighbor]);
                            }
                        }
                    }
                }
            }

            return new List<INode>();
        }

        private List<INode> ReconstructPath(Dictionary<INode, INode> cameFrom, INode current)
        {
            List<INode> path = new List<INode>();
            if (!cameFrom.ContainsKey(current))
            {
                return path;
            }

            while (current != null && cameFrom.ContainsKey(current))
            {
                path.Insert(0, current);
                current = cameFrom[current];
            }
            return path;
        }
    }
}﻿using MultigraphEditor.src.graph;
using MultigraphEditor.Src.graph;
using MultigraphEditor.Src.layers;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MultigraphEditor.Src.alghoritm
{
    internal interface IMGraphAlgorithm
    {
        List<INode> FindPath(INode startNode, INode endNode, IMGraphLayer targetLayer);
        String Name { get; }
    }
}
﻿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MultigraphEditor.Src.design
{
    [ToolboxItem(true)]
    [Designer(typeof(DoubleBufferedPanelDesigner))]
    public class DoubleBufferedPanel : Panel
    {
        public DoubleBufferedPanel()
        {
            DoubleBuffered = true;
            ResizeRedraw = true;
        }
    }
}
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms.Design;

namespace MultigraphEditor.Src.design
{
    internal class DoubleBufferedPanelDesigner : ControlDesigner
    {
        public override SelectionRules SelectionRules => base.SelectionRules & ~SelectionRules.AllSizeable;
    }
}
﻿using MultigraphEditor.Properties;
using MultigraphEditor.src.graph;
using MultigraphEditor.Src.graph;
using MultigraphEditor.src.layers;
using MultigraphEditor.Src.layers;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using MultigraphEditor.Forms;

namespace MultigraphEditor.Src.design
{
    public partial class LayoutPreviewControl : Control
    {
        Panel previewPanel = new Panel();
        public IMGraphLayer Layer { get; set; }
        public event EventHandler CanvasInvalidated;
        public event EventHandler<IMGraphLayer> LayerDeleted;

        public LayoutPreviewControl(IMGraphLayer layer, Bitmap bmp)
        {
            InitializeComponent();
            Layer = layer;
            bmp = new Bitmap(bmp);
            TableLayoutPanel optionsPanel = new TableLayoutPanel();
            //optionsPanel.AutoSize = true;
            optionsPanel.AutoSizeMode = AutoSizeMode.GrowAndShrink;
            optionsPanel.ColumnCount = 1;
            optionsPanel.ColumnStyles.Add(new ColumnStyle() { Width = 100, SizeType = SizeType.Percent });
            optionsPanel.RowCount = 3;
            optionsPanel.RowStyles.Add(new RowStyle() { Height = 33, SizeType = SizeType.Percent });
            optionsPanel.RowStyles.Add(new RowStyle() { Height = 33, SizeType = SizeType.Percent });
            optionsPanel.RowStyles.Add(new RowStyle() { Height = 33, SizeType = SizeType.Percent });

            Button editButton = new Button();
            editButton.Image = Resources.edit;
            editButton.AutoSize = true;
            editButton.Dock = DockStyle.Fill;
            editButton.Margin = new Padding(0, 0, 0, 0);
            ToolTip tipBtnEdit = new ToolTip();
            tipBtnEdit.SetToolTip(editButton, "Edit layer");
            editButton.Click += (sender, e) =>
            {
                EditForm layerEditor = new EditForm(layer);
                layerEditor.ShowDialog();
                CanvasInvalidated?.Invoke(this, EventArgs.Empty);
            };

            // Create a button for delete
            Button deleteButton = new Button();
            deleteButton.Image = Resources.trash;
            deleteButton.AutoSize = true;
            deleteButton.Dock = DockStyle.Fill;
            deleteButton.Margin = new Padding(0, 0, 0, 0);
            ToolTip tipBtnDelete = new ToolTip();
            tipBtnDelete.SetToolTip(deleteButton, "Delete layer");
            deleteButton.Click += (sender, e) =>
            {
                LayerDeleted?.Invoke(this, layer);
                CanvasInvalidated?.Invoke(this, EventArgs.Empty);
            }; 

            // Create a Button for preview
            Button previewButton = new Button();
            previewButton.Image = Resources.view;
            previewButton.AutoSize = true;
            previewButton.Dock = DockStyle.Fill;
            previewButton.Margin = new Padding(0, 0, 0, 0);
            ToolTip tipBtnLayer = new ToolTip();
            tipBtnLayer.SetToolTip(previewButton, "Make layer inactive");
            //previewButton.Height = 55;
            previewButton.Click += (sender, e) =>
            {
                layer.changeActive();
                previewButton.Image = layer.Active ? Resources.view : Resources.invisible;
                if (layer.Active)
                {
                    tipBtnLayer.SetToolTip(previewButton, "Make layer active");
                }
                else
                {
                    tipBtnLayer.SetToolTip(previewButton, "Make layer inactive");
                }
                CanvasInvalidated?.Invoke(this, EventArgs.Empty);
            };

            // Create a Label to display the name of the MGraphLayer
            Label layName = new Label();
            layName.Text = layer.Name;
            layName.AutoSize = true;

            // Create a TableLayoutPanel for layout
            TableLayoutPanel previewTable = new TableLayoutPanel();
            previewTable.AutoSize = true;
            previewTable.AutoSizeMode = AutoSizeMode.GrowAndShrink;
            previewTable.CellBorderStyle = TableLayoutPanelCellBorderStyle.Single;
            previewTable.ColumnCount = 2;
            previewTable.ColumnStyles.Add(new ColumnStyle() { Width = 70, SizeType = SizeType.Percent });
            previewTable.ColumnStyles.Add(new ColumnStyle() { Width = 20, SizeType = SizeType.Percent });
            previewTable.RowCount = 1;
            previewTable.RowStyles.Add(new RowStyle() { Height = 70, SizeType = SizeType.Percent });

            // Add controls to the TableLayoutPanel
            previewTable.Controls.Add(previewPanel, 0, 0);
            optionsPanel.Controls.Add(deleteButton, 0, 0);
            optionsPanel.Controls.Add(previewButton, 0, 1);
            optionsPanel.Controls.Add(editButton, 0, 2);
            previewTable.Controls.Add(optionsPanel, 1, 0);
            previewPanel.Controls.Add(layName);
            previewTable.Anchor = AnchorStyles.Left | AnchorStyles.Right | AnchorStyles.Top | AnchorStyles.Bottom;
            previewTable.Dock = DockStyle.Fill;

            // Add the TableLayoutPanel to the LayoutPreviewControl
            this.Controls.Add(previewTable);
            this.Dock = DockStyle.Fill;
            this.Tag = layer.Identifier;
            this.MouseDown += LayoutPreviewControl_MouseDown;
        }

        public void PaintPreviewPanel(Bitmap bmp)
        {
            Bitmap scaledBitmap = new Bitmap(bmp, new Size(previewPanel.Width, previewPanel.Height));
            using (Graphics g = previewPanel.CreateGraphics())
            {
                g.Clear(Color.White);
                g.DrawImage(scaledBitmap, 0, 0);
            }
        }

        protected override void OnPaint(PaintEventArgs pe)
        {
            base.OnPaint(pe);
        }

        public bool IsInside(float x, float y)
        {
            Point p = new Point((int)x, (int)y);
            return this.Bounds.Contains(p);
        }

        private void LayoutPreviewControl_MouseDown(object sender, MouseEventArgs e)
        {
            return;
            // Handle the mouse down event here
            // You can access the mouse coordinates using e.X and e.Y
        }
    }
}
﻿namespace MultigraphEditor.Src.design
{
    partial class LayoutPreviewControl
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            components = new System.ComponentModel.Container();
        }

        #endregion
    }
}
﻿using MultigraphEditor.src.layers;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MultigraphEditor.src.graph
{
    public interface IDrawable
    {
        public bool IsInside(float x, float y);
        public int Identifier { get; set; }
        public int GetIdentifier();
    }
}
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MultigraphEditor.src.graph
{
    public interface IEdge
    {
        public string? Label { get; set; }
        public INode Source { get; set; }
        public INode Target { get; set; }
        public bool Bidirectional { get; set; }
        public int Weight { get; set; }

        public void PopulateNode(INode src, INode tgt, bool bidir, int w);
    }
}
﻿using MultigraphEditor.src.layers;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MultigraphEditor.src.graph
{
    public interface IEdgeDrawable : IDrawable
    {
        internal INodeDrawable SourceDrawable { get; set; }
        internal INodeDrawable TargetDrawable { get; set; }
        public void PopulateDrawing(INodeDrawable srcDrw, INodeDrawable tgtDrw);
        public void Draw(Graphics g, IEdgeLayer l);
        public void DrawLabel(Graphics g, IEdgeLayer l);
        public void DrawArrow(Graphics g, IEdgeLayer l);
        public bool IsInsideControlPoint(float x, float y);
    }
}
﻿using MultigraphEditor.src.graph;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MultigraphEditor.Src.graph
{
    public interface IMGraphEditorEdge : IEdge, IEdgeDrawable
    {
    }
}
﻿using MultigraphEditor.src.graph;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MultigraphEditor.Src.graph
{
    public interface IMGraphEditorNode : INode, INodeDrawable
    {
    }
}
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MultigraphEditor.src.graph
{
    public interface INode
    {
        public string? Label { get; set; }
        public List<IEdge> Edges { get; set; }
        public void AddEdge(IEdge e);
        public void RemoveEdge(IEdge e);
    }
}
﻿using MultigraphEditor.src.layers;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MultigraphEditor.src.graph
{
    public interface INodeDrawable : IDrawable
    {
        public float X { get; set; }
        public float Y { get; set; }
        public float Diameter { get; set; }
        public (float, float) GetCoordinates();
        public (float, float) GetDrawingCoordinates();
        public void Draw(Graphics g, INodeLayer l);
        public void DrawLabel(Graphics g, INodeLayer l);

    }
}
﻿using MultigraphEditor.Forms;
using MultigraphEditor.src.layers;
using MultigraphEditor.Src.graph;
using System;
using System.Collections.Generic;
using System.Drawing.Drawing2D;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MultigraphEditor.src.graph
{
    public class MGraphEditorEdge: IMGraphEditorEdge
    {
        [ExcludeFromForm]
        public int Identifier { get; set; }
        public string Label { get; set; }
        [ExcludeFromForm]
        public INode Source { get; set; }
        [ExcludeFromForm]
        public INode Target { get; set; }
        public bool Bidirectional { get; set; }
        public int Weight { get; set; } = 1;
        [ExcludeFromForm]
        public required INodeDrawable SourceDrawable { get; set; }
        [ExcludeFromForm]
        public required INodeDrawable TargetDrawable { get; set; }
        [ExcludeFromForm]
        public required float controlPointX { get; set; }
        [ExcludeFromForm]
        public required float controlPointY { get; set; }

        public static int EdgeCounter = 0;

        public MGraphEditorEdge()
        {
            Identifier = GetIdentifier();
        }

        public int GetIdentifier()
        {
            return EdgeCounter++;
        }
        public void PopulateDrawing(INodeDrawable srcDrw, INodeDrawable tgtDrw)
        {
            SourceDrawable = srcDrw;
            TargetDrawable = tgtDrw;
            controlPointX = (srcDrw.X + tgtDrw.X) / 2;
            controlPointY = (srcDrw.Y + tgtDrw.Y) / 2;
        }

        public void PopulateNode(INode src, INode tgt, bool bidir, int w)
        {
            Source = src;
            Target = tgt;
            Bidirectional = bidir;
            Weight = w;
        }

        public void Draw(Graphics g, IEdgeLayer l)
        {
            g.SmoothingMode = SmoothingMode.AntiAlias;

            Pen pen = new Pen(l.Color, l.Width);
            Brush brush = new SolidBrush(l.Color);
            if (SourceDrawable != null && TargetDrawable != null)
            {
                if (SourceDrawable != TargetDrawable)
                {
                    float dx = TargetDrawable.X - SourceDrawable.X;
                    float dy = TargetDrawable.Y - SourceDrawable.Y;
                    float length = (float)Math.Sqrt(dx * dx + dy * dy);
                    float unitDx = dx / length;
                    float unitDy = dy / length;
                    float sourceRadius = SourceDrawable.Diameter / 2;
                    float targetRadius = TargetDrawable.Diameter / 2;
                    float sourceX = SourceDrawable.X + sourceRadius * unitDx;
                    float sourceY = SourceDrawable.Y + sourceRadius * unitDy;
                    float targetX = TargetDrawable.X - targetRadius * unitDx;
                    float targetY = TargetDrawable.Y - targetRadius * unitDy;

                    controlPointX = (sourceX + targetX) / 2;
                    controlPointY = (sourceY + targetY) / 2;

                    // Draw control point
                    g.FillEllipse(brush, controlPointX - 5, controlPointY - 5, 10, 10);

                    // Draw the edge
                    g.DrawLine(pen, sourceX, sourceY, targetX, targetY);
                }
                else
                {
                    throw new NotImplementedException();
                }
                DrawArrow(g, l);
                DrawLabel(g, l);
            }
        }

        public void DrawArrow(Graphics g, IEdgeLayer l)
        {
            float dx = TargetDrawable.X - SourceDrawable.X;
            float dy = TargetDrawable.Y - SourceDrawable.Y;
            float length = (float)Math.Sqrt(dx * dx + dy * dy);
            float unitDx = dx / length;
            float unitDy = dy / length;
            float sourceRadius = SourceDrawable.Diameter / 2;
            float targetRadius = TargetDrawable.Diameter / 2;

            int arrowSize = l.arrowSize;

            float arrowHeadX = TargetDrawable.X - (unitDx * targetRadius);
            float arrowHeadY = TargetDrawable.Y - (unitDy * targetRadius);
            float arrowHeadAngle = (float)Math.Atan2(dy, dx);

            using (SolidBrush brush = new SolidBrush(l.Color))
            {
                PointF[] points = new PointF[3];
                points[0] = new PointF(arrowHeadX, arrowHeadY);
                points[1] = new PointF(arrowHeadX - (arrowSize * (float)Math.Cos(arrowHeadAngle - (Math.PI / 6))), arrowHeadY - (arrowSize * (float)Math.Sin(arrowHeadAngle - (Math.PI / 6))));
                points[2] = new PointF(arrowHeadX - (arrowSize * (float)Math.Cos(arrowHeadAngle + (Math.PI / 6))), arrowHeadY - (arrowSize * (float)Math.Sin(arrowHeadAngle + (Math.PI / 6))));
                g.FillPolygon(brush, points);
            }

            if (Bidirectional)
            {
                float arrowHeadX2 = SourceDrawable.X + (unitDx * sourceRadius);
                float arrowHeadY2 = SourceDrawable.Y + (unitDy * sourceRadius);
                float arrowHeadAngle2 = (float)Math.Atan2(-dy, -dx);

                using (SolidBrush brush = new SolidBrush(l.Color))
                {
                    PointF[] points = new PointF[3];
                    points[0] = new PointF(arrowHeadX2, arrowHeadY2);
                    points[1] = new PointF(arrowHeadX2 - (arrowSize * (float)Math.Cos(arrowHeadAngle2 - (Math.PI / 6))), arrowHeadY2 - (arrowSize * (float)Math.Sin(arrowHeadAngle2 - (Math.PI / 6))));
                    points[2] = new PointF(arrowHeadX2 - (arrowSize * (float)Math.Cos(arrowHeadAngle2 + (Math.PI / 6))), arrowHeadY2 - (arrowSize * (float)Math.Sin(arrowHeadAngle2 + (Math.PI / 6))));
                    g.FillPolygon(brush, points);
                }
            }
        }

        public void DrawLabel(Graphics g, IEdgeLayer l)
        {
            float dx = TargetDrawable.X - SourceDrawable.X;
            float dy = TargetDrawable.Y - SourceDrawable.Y;
            float length = (float)Math.Sqrt(dx * dx + dy * dy);
            float unitDx = dx / length;
            float unitDy = dy / length;
            float sourceRadius = SourceDrawable.Diameter / 2;
            float targetRadius = TargetDrawable.Diameter / 2;
            float sourceX = SourceDrawable.X + sourceRadius * unitDx;
            float sourceY = SourceDrawable.Y + sourceRadius * unitDy;
            float targetX = TargetDrawable.X - targetRadius * unitDx;
            float targetY = TargetDrawable.Y - targetRadius * unitDy;

            float labelX = (sourceX + targetX) / 2;
            float labelY = (sourceY + targetY) / 2 - 5;
            if (!string.IsNullOrEmpty(Label))
            {
                labelY -= 10;
            }

            using (SolidBrush brush = new SolidBrush(l.Color))
            {
                SizeF textSize = g.MeasureString(Label + "\n" + Weight.ToString(), l.Font);
                PointF labelPosition = new PointF(labelX - textSize.Width / 2, labelY - textSize.Height / 2);

                g.DrawString(Weight.ToString() + "\n" + Label, l.Font, brush, labelPosition);
            }
        }

        public bool IsInside(float x, float y)
        {
            float tolerance = 5f;
            float lineDistance = PointToLineDistance(x, y);
            bool isInsideEllipse = IsPointInsideEllipse(x, y, SourceDrawable.X + (SourceDrawable.Diameter / 4) + SourceDrawable.Diameter, SourceDrawable.Y + SourceDrawable.Diameter, SourceDrawable.Diameter, SourceDrawable.Diameter);

            if (lineDistance <= tolerance || isInsideEllipse)
            {
                return true;
            }

            return false;
        }

        public bool IsInsideControlPoint(float x, float y)
        {
            return IsPointInsideEllipse(x, y, controlPointX, controlPointY, 10, 10);
        }

        public bool IsPointInsideEllipse(float x, float y, float centerX, float centerY, float width, float height)
        {
            float normalizedX = (x - centerX) / (width / 2);
            float normalizedY = (y - centerY) / (height / 2);

            return (normalizedX * normalizedX) + (normalizedY * normalizedY) <= 1;
        }

        private float PointToLineDistance(float x, float y)
        {
            float dx = TargetDrawable.X - SourceDrawable.X;
            float dy = TargetDrawable.Y - SourceDrawable.Y;
            float length = (float)Math.Sqrt(dx * dx + dy * dy);
            float unitDx = dx / length;
            float unitDy = dy / length;
            float sourceRadius = SourceDrawable.Diameter / 2;
            float targetRadius = TargetDrawable.Diameter / 2;
            float sourceX = SourceDrawable.X + sourceRadius * unitDx;
            float sourceY = SourceDrawable.Y + sourceRadius * unitDy;
            float targetX = TargetDrawable.X - targetRadius * unitDx;
            float targetY = TargetDrawable.Y - targetRadius * unitDy;

            float lineX1 = sourceX;
            float lineY1 = sourceY;
            float lineX2 = targetX;
            float lineY2 = targetY;

            float A = x - lineX1;
            float B = y - lineY1;
            float C = lineX2 - lineX1;
            float D = lineY2 - lineY1;

            float dot = (A * C) + (B * D);
            float len_sq = (C * C) + (D * D);
            float param = dot / len_sq;

            float nearestX, nearestY;

            if (param < 0)
            {
                nearestX = lineX1;
                nearestY = lineY1;
            }
            else if (param > 1)
            {
                nearestX = lineX2;
                nearestY = lineY2;
            }
            else
            {
                nearestX = lineX1 + (param * C);
                nearestY = lineY1 + (param * D);
            }

            float dxx = x - nearestX;
            float dyy = y - nearestY;

            return (float)Math.Sqrt((dxx * dxx) + (dyy * dyy));
        }
    }
}
﻿using MultigraphEditor.Forms;
using MultigraphEditor.src.layers;
using MultigraphEditor.Src.graph;
using System;
using System.Collections.Generic;
using System.Drawing.Drawing2D;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MultigraphEditor.src.graph
{
    public class MGraphEditorNode : IMGraphEditorNode
    {
        [ExcludeFromForm]
        public int Identifier { get; set; }
        public string? Label { get; set; }
        [ExcludeFromForm]
        public List<IEdge> Edges { get; set; } = new List<IEdge>();
        [ExcludeFromForm]
        public List<INode> Neighbours { get; set; } = new List<INode>();
        [ExcludeFromForm]
        public float X { get; set; }
        [ExcludeFromForm]
        public float Y { get; set; }
        public float Diameter { get; set; } = 20;
        [ExcludeFromForm]
        public static int NodeCounter = 0;

        public MGraphEditorNode()
        {
            Identifier = GetIdentifier();
            Label = Identifier.ToString();
        }

        public int GetIdentifier()
        {
            return NodeCounter++;
        }

        public void AddEdge(IEdge e)
        {
            Edges.Add(e);
        }

        public void RemoveEdge(IEdge e)
        {
            Edges.Remove(e);
        }

        public void AddNeighbour(INode n)
        {
            Neighbours.Add(n);
        }

        public void RemoveNeighbour(INode n)
        {
            Neighbours.Remove(n);
        }

        public (float, float) GetCoordinates()
        {
            return (X, Y);
        }

        public (float, float) GetDrawingCoordinates()
        {
            return (X - Diameter / 2, Y - Diameter / 2);
        }

        public void Draw(Graphics g, INodeLayer l)
        {
            g.SmoothingMode = SmoothingMode.AntiAlias;

            Pen p = new Pen(l.Color, l.Width);
            using (p)
            {
                float x = GetDrawingCoordinates().Item1;
                float y = GetDrawingCoordinates().Item2;

                g.DrawEllipse(p, x, y, Diameter, Diameter);
                if (Label != null)
                {
                    DrawLabel(g, l);
                }
            }
        }

        public void DrawLabel(Graphics g, INodeLayer l)
        {
            // Calculate label position and size
            SizeF textSize = g.MeasureString(Label, l.Font);
            float labelX = GetDrawingCoordinates().Item1 + (Diameter - textSize.Width) / 2;     // Center horizontally
            float labelY = GetDrawingCoordinates().Item2 + (Diameter - textSize.Height) / 2;    // Center vertically

            // Draw label
            Color textColor = l.Color;
            g.DrawString(Label, l.Font, new SolidBrush(textColor), labelX, labelY);
        }

        public bool IsInside(float x, float y)
        {
            bool a = x >= GetDrawingCoordinates().Item1 && x <= GetDrawingCoordinates().Item1 + Diameter &&
                               y >= GetDrawingCoordinates().Item2 && y <= GetDrawingCoordinates().Item2 + Diameter;
            return a;
        }
    }
}
﻿using MultigraphEditor.src.graph;
using MultigraphEditor.Src.graph;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MultigraphEditor.src.layers
{
    public interface IEdgeLayer : ILayer
    {
        public int arrowSize { get; set; }
        public List<IMGraphEditorEdge> edges { get; set; }
    }
}
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MultigraphEditor.src.layers
{
    public interface ILayer
    {
        Font Font { get; set; }
        Color Color { get; set; }
        int Width { get; set; }
        bool Active { get; set; }
        int Identifier { get; set; }
        String Name { get; set; }
        void changeActive();
    }
}
﻿using MultigraphEditor.src.layers;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MultigraphEditor.Src.layers
{
    public interface IMGraphLayer : INodeLayer, IEdgeLayer
    {
    }
}
﻿using MultigraphEditor.src.graph;
using MultigraphEditor.Src.graph;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MultigraphEditor.src.layers
{
    public interface INodeLayer : ILayer
    {
        public List<IMGraphEditorNode> nodes { get; set; }
    }
}
﻿using MultigraphEditor.Forms;
using MultigraphEditor.src.graph;
using MultigraphEditor.src.layers;
using MultigraphEditor.Src.graph;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MultigraphEditor.Src.layers
{
    internal class MGraphLayer : IMGraphLayer
    { 
        public Font Font { get; set; } = new Font("Lato", 8);
        public Color Color { get; set; } = Color.Black;
        public int Width { get; set; } = 4;
        [ExcludeFromForm]
        public List<IMGraphEditorNode> nodes { get; set; }
        [ExcludeFromForm]
        public List<IMGraphEditorEdge> edges { get; set; }
        [ExcludeFromForm]
        public bool Active { get; set; } = true;
        public int arrowSize { get; set; } = 10;
        [ExcludeFromForm]
        public int Identifier { get; set; }
        public String Name { get; set; }
        public void changeActive()
        {
            Active = !Active;
        }
        static int id = 0;
        public MGraphLayer()
        {
            Identifier = id++;
            Name = "Layer " + Identifier;
        }
    }
}
